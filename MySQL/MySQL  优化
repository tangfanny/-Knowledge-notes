MySQL优化
一、概述
优化数据库是数据库管理人员和数据库开发人员的必备技能：
MySQL优化一方面是找出系统的瓶颈
另一方面，需要合理的结构设计和参数调整，以提高用户操作响应的速度，同时还要尽可能节省系统资源，以便系统可以提供更大负荷的服务
二、MySQL优化
1.配置优化
1)操作系统内核的优化
系统内核优化对专门的MySQL服务器来说，无非是内存实用、连接数、超时处理、tcp处理等方面的优化，根据自己的硬件配置来优化，这里不多讲
硬件：
如果需要庞大的数据库表（>2G），应考虑使用64位的硬件结构
对于数据库存放在一个专用的服务器系统，应考虑1G的以太网
操作系统：
不要交换区，增加更多的内存
增加系统和MySQL服务器的打开文件数量
增加系统的进程和线程数量
使用支持大文件的文件系统
2)MySQL配置文件的优化
一般来说包含：IO处理的常用参数、最大连接数设置、缓存使用参数的设置、慢日志的参数的设置、innodb相关参数的设置等，如果有主从关系在设置主从同步的相关参数即可，网上相关的配置文件很多，大同小异，常用的配置大多修改这些就差不多够用了
①　MySQL编译安装参数的优化
②　MySQL服务器参数的调整优化，通过修改/etc/my.cnf(my.ini)文件
③　优化服务器配置参数对Innodb表尤为重要
2.SQL语句的优化
1)IS NULL和IS NOT  NULL
①　不能用null作为索引
②　如果某列作为空值，即使对该列创建索引也不会提高性能
③　任何在where子句中使用is null或is not null 的语句，优化器是不允许使用索引的
2)尽量少做计算
MySQL的作用是用来存储数据的，不是用来计算的，做计算的话可以用其他办法实现，MySQL做计算是很耗费资源的
任何对列的操作都会导致全表扫描，包括数据库函数、计算表达式等
3)使用事务来处理繁琐SQL语句的操作
当需要使用一系列的语句来完成某种工作时，应该使用事务，它的作用是：要么语句块中所有语句都操作成功，要么都失败
4)尽量减少排序
排序操作会消耗较多的cpu资源，所以非必要数据减少排序
5)尽量避免select*
在数据量少并且访问量不大的情况下，select*没什么影响，但是量级达到一定级别的时候，在执行效率和IO资源的使用上，还是有很大关系的，用什么字段取什么字段，减少不必要的资源浪费
在表中读取越多的数据，它的查询会变慢。增加磁盘的操作时间，如果在数据库服务器和web服务器是独立分开的情况下，你将会经历非常漫长的网络延迟，仅仅是因为数据的不必要在服务器之间传输
6)尽量用join代替子查询
虽然join的性能并不佳，但是和MySQL的子查询比起来还是有非常大的性能优势，它不需要再内存中创建临时表来完成这个逻辑上的需要两个步骤的查询工作
 select * from goods where  brand_id in(select brand_id from brand);
select * from goods left join brand on  goods.brand_id=brand.brand_id  where brand.brand_id is not null;
7)尽量减少or
当where中存在多个条件以“或”并存时，MySQL优化器并没有很好的解决其执行优化问题，再加上MySQL特有的sql与storage分层架构方式，造成了其性能比较低下，很多时候使用union all或者是union代替‘or’
8)尽量使用union all代替union
union all和union的差异主要是前者需要将两个（或者多个）结果集合并后在进行唯一性过滤操作，这样就会涉及到排序，增加大量的cpu运算，加大资源消耗及延迟。所以当我们可以确认不可能出现重复结果集或者不在乎重复结果集的，尽量使用union all而不是union
9)尽量早过滤
在sql编写中同样可以使用这一原则来优化一些join的SQL，比如我们在多个表进行分页查询的时候，我们最好能在一个表上先过滤好数据分好页，然后再用分好页的结果集与另外的表join，这样可以尽可能多的减少不必要的IO操作，大大节省IO操作的消耗时间
10)避免类型转换
这里说的类型转换指where语句中出现column字段的类型和传入的参数不一致的时候发生的类型转换
11)优先优化高并发的sql，而不是执行效率低某些大SQL
对于破坏性来说，高并发的SQL总是会比低频率的来的大，因为高并发的sql一旦出现问题，甚至不会给我们任何喘息的机会就会将系统压垮，而对于虽然需要消耗大量IO而且响应很慢的SQL，由于频率低，即使遇到，最多就是让整个系统响应慢一点，但至少可以撑会，让我们有缓冲的机会
12)从全局出发，而不是片面调整
SQL优化不能是单独针对某一个进行，而应充分考虑系统中所有的SQL，尤其是通过调整索引优化SQL的执行计划的时候，千万不能顾此失彼，因小失大
13)尽可能对数据库中运行的每一条SQL语句进行explain
优化SQL，要做到心中有数，知道SQL的执行计划才能判断是否有优化余地，才能判断是否存在执行计划问题，在对数据库中运行的SQL进行了一段时间的优化后，很明显的问题SQL可能已经很少了，大多都需要去发掘，这时候就需要进行大量的explain操作收集执行计划，并判断是否需要进行优化

3.字段类型优化
1)尽可能使用更小的数据类型（如：mediumint比int更合适，mediumint使用的空间要少25%）
2)尽可能定义这个字段为not null，它比任何事情更快而且节省一位，除非这个字段需要null
3)如果没有用到变长字段，那就使用固定长度大小的字段格式，如varchar->char
4)对于某些文本字段，例如省份或者性别，可以将他们定义为enum型，enum型会被当作数值型数据来处理

4.分表优化
数据库中的表越小，在它上边执行的查询也越快：
1)按数据量大小分表，当单表数据量达到一定值后，数据自动存入到新增表中
2)按时间分表，以月、年等单位时间，不同时间段产生数据存入不同的表
3)按主键分表。对主键的内容通过一定的hash算法计算出数据存储表的表名















